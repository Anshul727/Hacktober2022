class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        
        int fresh=0,time=-1;
        queue<pair<int,int>> q;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                    fresh++;
                if(grid[i][j]==2)
                    q.push({i,j});
            }
        }
        vector<pair<int,int>> dirs={{0,1},{1,0},{0,-1},{-1,0}};
        while(!q.empty())
        {
            
            int sz=q.size();
            for(int i=0;i<sz;i++)
            {
                auto p=q.front();
                q.pop();

                for(auto d:dirs)
                {
                    int x=d.first + p.first;
                    int y=d.second + p.second;

                    if(x>=0 && x< n && y>=0 && y<m && grid[x][y]==1)
                    {
                        grid[x][y]=2;
                        q.push({x,y});
                        fresh--;
                    }
                }

            }
            time++;
        }
        
        if(fresh>0)
            return -1;
        else if(time==-1)
            return 0;
        else
            return time;
    }
};
